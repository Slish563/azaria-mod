import java.nio.charset.StandardCharsets
import java.nio.file.FileSystemAlreadyExistsException
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.StandardOpenOption
import java.time.format.DateTimeFormatter

buildscript{
    ext{
        // v7
        mindustryPath = "com.github.Anuken.MindustryJitpack"
        mindustryVersionFull = 'fa17da53c68cf2600b4640ff653cee2f48d50740'
        mindustryVersion = mindustryVersionFull.substring(0, 10)
        testMindustryBuild = '22823' //regular versions are prefixed with 'v' (eg. 'v135'), BE versions has no prefix (eg. '22823')
        arcVersion = "b1b88883e2"
//        arcVersion = "916c5a77"


        // normal
        //mindustryPath = "com.github.Anuken.Mindustry"
        //mindustryVersion = 'v135'
        //arcVersion=mindustryVersion
        jabelVersion = "0.6.0"

        parserVersion = '3.22.1'

        aciVersion = "45ad8cd8ed9"

//        gasVersion = "27b10c13f7e"

        modCoreVersion = "59185cba3b9"


        kotlinVersion = "1.6.0"
//        kotlinVersion = "1.5.31"

        sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
    }
    repositories{
        mavenLocal()
        mavenCentral()
        google()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url 'https://jitpack.io' }
    }

    dependencies{
        classpath "com.github.Anuken.Arc:arc-core:$arcVersion"
        classpath "$mindustryPath:core:$mindustryVersion"
        classpath "com.github.Anuken.Arc:packer:$arcVersion"

        classpath "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
//        classpath "com.github.Zelaux.GasLibrary:core:$gasVersion"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}
plugins{
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
}
version '1.0'
allprojects{
    apply plugin: "kotlin"
    apply plugin: 'maven-publish'

    group = "com.github.Sunset"

    ext{
        arcModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Arc:$name:$arcVersion"
        }
        writeProcessors = {
            new File(rootDir, "annotations/src/main/resources/META-INF/services/").mkdirs()
            def processorFile = new File(rootDir, "annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
            def text = new StringBuilder()
            def files = new File(rootDir, "annotations/src/main/java")
            files.eachFileRecurse(
                    groovy.io.FileType.FILES
            ){ file ->
                if(file.name.endsWith(".java") && (file.text.contains(" extends ModBaseProcessor") || (file.text.contains(" extends AbstractProcessor") && !file.text.contains("abstract class")))){
                    text.append(file.path.substring(files.path.length() + 1)).append("\n")
                }
            }

            processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
        }
        addModInfoFile = { File archiveFile ->

            def time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:MM DD.MM.YYYY"))
            String suffix = project.hasProperty("commit") ? " commit_${commit}" : " local_${time}"
            println "Version suffix${suffix}"
            def reader = new BufferedReader(new FileReader(new File(rootDir, "mod.hjson")))
            // now append some extra content
            def jarFile
            try{
                jarFile = FileSystems.newFileSystem(java.nio.file.Path.of(URI.create("" + archiveFile.toURI())), new HashMap<>())
            }catch(FileSystemAlreadyExistsException e){
                e.printStackTrace()
                jarFile = FileSystems.getFileSystem(URI.create("jar:" + archiveFile.toURI()))
                jarFile.close()
                jarFile = FileSystems.newFileSystem(URI.create("jar:" + archiveFile.toURI()), new HashMap<>())
//                FileSystems
            }
            def modInfoFile = jarFile.getPath("mod.hjson")
            try(Writer writer = Files.newBufferedWriter(modInfoFile, StandardCharsets.UTF_8, StandardOpenOption.CREATE)){
                reader.lines().forEach(s -> {
                    writer.write(s)
                    if(s.startsWith("version: ")) writer.write(suffix)
                    writer.write('\n')
                })
            }
            // close
            reader.close()
            jarFile.close()
        }
    }
    repositories{
        mavenLocal()
        google()
        mavenCentral()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
        maven{ url 'https://jitpack.io' }
    }

    compileKotlin{
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(JavaCompile){
        targetCompatibility = 8
        sourceCompatibility = JavaVersion.VERSION_16
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]

        options.forkOptions.jvmArgs.addAll([
                '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
        ])
    }
}
/*
dependencies{
    implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
    implementation "com.github.Zelaux.ZelauxModCore:plugins:$modCoreVersion"
    implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"
    implementation "com.github.Zelaux.GasLibrary:core:$gasVersion"
}*/

configure(project(":annotations")){
    tasks.withType(JavaCompile){
        targetCompatibility = 8
        sourceCompatibility = 8
        options.fork = true
    }
}

//compile with java 8 compatibility for everything except the annotation project
configure(subprojects - project(":annotations")){
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }

    tasks.withType(Javadoc){
        options{
            addStringOption('Xdoclint:none', '-quiet')
            addStringOption('-release', '16')
        }
    }
}

project(":core"){
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt{
        javacOptions{
            option("-source", "16")
            option("-target", "1.8")
        }
    }

    compileJava.options.fork = true
    task preGen{
        outputs.upToDateWhen{ false }
        writeProcessors()
    }

    task sourcesJar(type: Jar, dependsOn: classes){
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task assetsJar(type: Jar, dependsOn: ":tools:pack"){
        archiveClassifier = 'assets'
        from files("assets"){
            exclude "config", "cache", "music", "sounds"
        }
    }
    artifacts{
        archives sourcesJar
        archives assetsJar
    }
    dependencies{
        compileJava.dependsOn(preGen)

        compileOnly "org.lz4:lz4-java:1.7.1"
        compileOnly arcModule("arc-core")
        compileOnly arcModule("extensions:flabel")
        compileOnly arcModule("extensions:freetype")
        compileOnly arcModule("extensions:g3d")
        compileOnly arcModule("extensions:fx")
        compileOnly arcModule("extensions:arcnet")

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:blocks:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:utils:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:graphics:$modCoreVersion"

//        compileOnly "com.github.Zelaux.GasLibrary:core:$gasVersion"

        compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"

        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

        compileOnly "$mindustryPath:core:$mindustryVersion"

        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
        compileOnly project(":annotations")

        kapt project(":annotations")

//        annotationProcessor 'com.github.Anuken:jabel:34e4c172e65b3928cd9eabe1993654ea79c409cd'

    }
    jar{
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from{
            configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
        }
        /*def libFolder = new arc.files.Fi(buildDir).child("gasLibrary")
        def gasVersionFile = libFolder.child("version.txt")
        if(!gasVersionFile.exists()){
            gasVersionFile.writeString("")
        }
        if(gasVersionFile.readString() != gasVersion){
            def libUrl = "https://jitpack.io/com/github/Zelaux/GasLibrary/build/$gasVersion/build-${gasVersion}.jar"
            def libFile = libFolder.child("GasLibrary.jar")

            println "Downloading GasLibrary $gasVersion" + " to ${libFile.file().canonicalPath}"
            new URL(libUrl).withInputStream{ i -> libFile.file().withOutputStream{ it << i } }
            println "Done"
            gasVersionFile.writeString(gasVersion)
        }
        from(libFolder.file()){
            include("GasLibrary.jar")
        }*/
        exclude("sunset/entities/comp/**")
        exclude("sunset/codegen/**")
    }
}
project(":tests"){
    apply plugin: "java"
    compileJava.options.fork = true

    dependencies{
        testImplementation project(":core")
        testImplementation "com.github.Anuken.Arc:arc-core:$arcVersion"

        testImplementation "$mindustryPath:core:$mindustryVersion"
        //testImplementation "$mindustryPath:server:$mindustryVersion"

        testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
        testImplementation arcModule("backends:backend-headless")
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"

        testImplementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        testImplementation "com.github.Zelaux.ZelauxModCore:plugins:$modCoreVersion"
//        compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
    }

    test{
        //fork every test so mods don't interact with each other
        forkEvery = 1
        useJUnitPlatform()
        workingDir = new File("../core/assets")
        testLogging{
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }
}
project(":tools"){
    apply plugin: "java"
    dependencies{
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'commons-io:commons-io:2.5'

        implementation project(":core")

        implementation arcModule("natives:natives-desktop")
        implementation arcModule("natives:natives-freetype-desktop")
        implementation arcModule("backends:backend-headless")


        implementation "com.github.javaparser:javaparser-symbol-solver-core:$parserVersion"
        implementation "$mindustryPath:core:$mindustryVersion"
//        implementation "com.github.Anuken.Mindustry:tools:$mindustryVersionOld"

        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$modCoreVersion"

//        implementation "com.github.Zelaux.GasLibrary:core:$gasVersion"


        implementation "com.github.Anuken.Arc:packer:$arcVersion"
    }
}
project(":annotations"){
    apply plugin: "java-library"
    dependencies{
        implementation 'com.squareup:javapoet:1.12.1'
        implementation "com.github.javaparser:javaparser-symbol-solver-core:$parserVersion"

        implementation arcModule('arc-core')
        implementation "$mindustryPath:core:$mindustryVersion"

        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"

//        implementation "com.github.Zelaux.GasLibrary:core:$gasVersion"
    }
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")

        def platformRoot =
                new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists() }

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (
                project(":core").configurations.compileClasspath.asList() +
                        project(":core").configurations.runtimeClasspath.asList() +
                        [new File(platformRoot, "android.jar")]
        ).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}
jar{
    dependsOn.clear()
    dependsOn "core:jar"
//    dependsOn "mark"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from{
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        project(":core").fileTree("build/libs/core.jar").collect{ it.isDirectory() ? it : zipTree(it) }
    }


    from(rootDir){
//        include "mod.hjson"
//        include "mod.json"
        include "icon.png"
    }

    from("core/assets/"){
        include "**"
    }
    doLast{
        addModInfoFile(archiveFile.get().asFile)
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{
        [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"),
         zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")]
    }

    doLast{
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}

static def os(){ //Returns OS name
    String s = System.getProperty("os.name")
    return s == null ? "" : s
}

static def getdatadir(){ //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if(ret == null){
        def os = os()
        if(os.contains("Windows")){
            return System.getenv("AppData") + "\\Mindustry\\"
        }else if(os.contains("Linux") || os.contains("BSD")){
            if(System.getenv("XDG_DATA_HOME") != null){
                String dir = System.getenv("XDG_DATA_HOME")
                if(!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        }else if(os.contains("Mac")){
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/"
        }
    }
    return ret
}

task mjar(){
    dependsOn "jar"
    doFirst{}
    ext{
        acopy = { String intoPath ->
            delete{
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy{
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "Moved to ${intoPath}"
        }
    }
    doLast{
        def modsDirectories = []
        def file = new File(rootDir, "modsDirectories.txt")

        if(file.exists()){
            BufferedReader reader = new BufferedReader(new FileReader(file))
            reader.lines().forEach(line -> modsDirectories.add(line))
            reader.close()
        }else{
            modsDirectories.add("classic")
        }
        for(String directory : modsDirectories){
            if(directory.startsWith("#") || directory.startsWith("//")){
                println "Directory \"$directory\" was skipped."
                continue
            }
            if(directory.equals("classic")){
                directory = getdatadir() + "mods"
            }
            acopy(directory)
        }
        def time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"))
        println "Build ended at: ${time}"
    }
}

task run{
    dependsOn mjar
    doLast{
        def gamePath = "${temporaryDir.absolutePath}\\Mindustry${testMindustryBuild}.jar"
        def gameUrl = testMindustryBuild.startsWith("v") ?
            "https://github.com/Anuken/Mindustry/releases/download/${testMindustryBuild}/Mindustry.jar" :
            "https://github.com/Anuken/MindustryBuilds/releases/download/${testMindustryBuild}/Mindustry-BE-Desktop-${testMindustryBuild}.jar"
        def gameFile = new File(gamePath)
        if (!gameFile.exists()) {
            println "Downloading Mindustry ${testMindustryBuild} from ${gameUrl} to ${gamePath}"
            new URL(gameUrl).withInputStream{ i -> gameFile.withOutputStream{ it << i } }
            println "Done"
        }
        javaexec{ classpath = files(gamePath) }
    }
}