buildscript {
    ext {
        arcHash = 'v135'
        mindustryVersion = 'v135'
        parserVersion = '3.22.1'
        aciVersion = "ddba381caf1"
        String modCoreVersionDemo = null;
        try {
            modCoreVersionDemo = new String(new java.net.URL("https://raw.githubusercontent.com/Zelaux/ZelauxModCore/master/versions/" + mindustryVersion + ".txt").openStream().readAllBytes());
        } catch (IOException exception) {
            throw new RuntimeException(exception);
        }
        println "core: " + modCoreVersionDemo
        modCoreVersion = modCoreVersionDemo
        modCoreVersion = "7dd781781c8"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:core:$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:tools:$mindustryVersion"
        classpath "com.github.Anuken.Arc:packer:$arcHash"
        classpath "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id "org.jetbrains.kotlin.kapt" version "1.5.31"
}
ext {
    //the build number that this mod is made for
    //version of SDK you will be using
    sdkVersion = '30'
    sdkRoot = System.getenv("ANDROID_HOME")

    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}

version '1.0'
allprojects {
    apply plugin: 'maven-publish'

//    version = 'release'
    group = pGroup

    ext {
        arcModule = { String name ->
            //skip to last submodule
            if (name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Arc:$name:$arcHash"
        }
        writeProcessors = {
            new File(rootDir, "annotations/src/main/resources/META-INF/services/").mkdirs()
            def processorFile = new File(rootDir, "annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
            def text = new StringBuilder()
            def files = new File(rootDir, "annotations/src/main/java")
            files.eachFileRecurse(
                    groovy.io.FileType.FILES
            ) { file ->
                if (file.name.endsWith(".java") && (file.text.contains(" extends ModBaseProcessor") || (file.text.contains(" extends AbstractProcessor") && !file.text.contains("abstract class")))) {
                    text.append(file.path.substring(files.path.length() + 1)).append("\n")
                }
            }

            processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
        }
    }
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
    }
    tasks.withType(JavaCompile) {
        targetCompatibility = 8
        sourceCompatibility = JavaVersion.VERSION_16
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]

        options.forkOptions.jvmArgs.addAll([
                '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
        ])
    }
}

dependencies {
    implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
    implementation "com.github.Zelaux.ZelauxModCore:plugins:$modCoreVersion"
    implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"
}

configure(project(":annotations")) {
    tasks.withType(JavaCompile) {
        targetCompatibility = 8
        sourceCompatibility = 8
        options.fork = true
    }
}

//compile with java 8 compatibility for everything except the annotation project
configure(subprojects - project(":annotations")) {
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '8'])
    }

    tasks.withType(Javadoc) {
        options {
            addStringOption('Xdoclint:none', '-quiet')
            addStringOption('-release', '16')
        }
    }
}

project(":core") {
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt {
        javacOptions {
            option("-source", "16")
            option("-target", "1.8")
        }
    }

    compileJava.options.fork = true

    task preGen {
        outputs.upToDateWhen { false }
        writeProcessors()
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task assetsJar(type: Jar, dependsOn: ":tools:pack") {
        archiveClassifier = 'assets'
        from files("assets") {
            exclude "config", "cache", "music", "sounds"
        }
    }
    artifacts {
        archives sourcesJar
        archives assetsJar
    }
    dependencies {
        compileJava.dependsOn(preGen)

        compileOnly "org.lz4:lz4-java:1.7.1"
        compileOnly arcModule("arc-core")
        compileOnly arcModule("extensions:flabel")
        compileOnly arcModule("extensions:freetype")
        compileOnly arcModule("extensions:g3d")
        compileOnly arcModule("extensions:fx")
        compileOnly arcModule("extensions:arcnet")

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:plugins:$modCoreVersion"
        compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"

        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:tools:$mindustryVersion"

        annotationProcessor 'com.github.Anuken:jabel:34e4c172e65b3928cd9eabe1993654ea79c409cd'
        compileOnly project(":annotations")

        kapt project(":annotations")

//        annotationProcessor 'com.github.Anuken:jabel:34e4c172e65b3928cd9eabe1993654ea79c409cd'

    }

    afterEvaluate {
        task mergedJavadoc(type: Javadoc) {
            if (true) return null;
            def blacklist = [project(":annotations")]
            if (findProject(":android") != null) {
                blacklist += project(":android")
            }

            source rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
    jar {
        exclude("sunset/entities/comp/**")
        exclude("sunset/entities/compByAnuke/**")
    }
}
project(":tests") {
    apply plugin: "java"
    compileJava.options.fork = true

    dependencies {
        testImplementation project(":core")
        testImplementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        testImplementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        testImplementation "com.github.Anuken.Mindustry:server:$mindustryVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
        testImplementation arcModule("backends:backend-headless")
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"

        testImplementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        testImplementation "com.github.Zelaux.ZelauxModCore:plugins:$modCoreVersion"
//        compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
    }

    test {
        //fork every test so mods don't interact with each other
        forkEvery = 1
        useJUnitPlatform()
        workingDir = new File("../core/assets")
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }
}
project(":tools") {
    apply plugin: "java"
    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'commons-io:commons-io:2.5'

        implementation project(":core")

        implementation "com.github.javaparser:javaparser-symbol-solver-core:$parserVersion"
        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Anuken.Mindustry:tools:$mindustryVersion"

        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$modCoreVersion"

        implementation "com.github.Anuken.Arc:packer:$arcHash"
    }
}
project(":annotations") {
    apply plugin: "java-library"
    dependencies {
        implementation 'com.squareup:javapoet:1.12.1'
        implementation "com.github.javaparser:javaparser-symbol-solver-core:$parserVersion"

        implementation arcModule('arc-core')
        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Anuken.Mindustry:tools:$mindustryVersion"

        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
    }
}
configure([":core", ":tools"].collect { project(it) }) {
    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
}
task jarAndroid {
    dependsOn "jar"

    doLast {
        //collect dependencies needed for desugaring
        def files = (
                project(":core").configurations.compileClasspath.asList() +
                        project(":core").configurations.runtimeClasspath.asList() +
                        configurations.runtimeClasspath.asList() +
                        [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")]
        )

        def dependencies = files.collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar")
    }
}
jar {
    dependsOn "core:jar"
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/") {
        include "**"
    }
}
task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from {
        [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"),
         zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")]
    }

    doLast {
        delete { delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete { delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}


/*
task dexify(type: Jar) {
    archiveName "dexed-$pArtifactFilename"

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, pArtifactFilename),
               dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "dexed.jar")
    doFirst {
        exec {
            workingDir dexedArtifact.parent
            def command = ["d8", "--min-api", pMinApi, "--output", dexedArtifact, jarArtifact]
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows'))
                commandLine("cmd", "/c", *command)
            else
                commandLine(*command)

        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}
*/

def os() { //Returns OS name
    String s = System.getProperty("os.name");
    return s == null ? "" : s;
}

def getdatadir() { //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if (ret == null) {
        def os = os()
        if (os.contains("Windows")) {
            return System.getenv("AppData") + "\\Mindustry\\"
        } else if (os.contains("Linux") || os.contains("BSD")) {
            if (System.getenv("XDG_DATA_HOME") != null) {
                String dir = System.getenv("XDG_DATA_HOME")
                if (!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        } else if (os.contains("Mac")) {
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/";
        }
    }
    return ret
}

task mjar() {
    dependsOn "jar"
    doFirst {
    }
    ext {
        move = { String intoPath ->
            delete {
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy {
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "moved to " + intoPath
        }
    }
    doLast {

        def modsDirectories = [];
        def file = new File(rootDir, "modsDirectories.txt");
        if (file.exists()) {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            reader.lines().forEach(line -> modsDirectories.add(line))
        }
        for (String directory : modsDirectories) {
            if (directory.equals("classic")) {
                directory = getdatadir() + "mods";
            }
            move(directory);
        }
//        move(getdatadir() + "mods")
        def time = LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
        System.out.println("\tlast build time: ${time}")
    }
}

/*(не работает)
tasks.create("run").dependsOn("mjar").doLast {
    def path = temporaryDir.absolutePath + "\\Mindustry.jar"
    def url = "https://github.com/Anuken/Mindustry/releases/download/$mindustryVersion" + "/Mindustry.jar"
    def f = new File(path)
    if (!f.exists()) {
        print "Downloading Mindustry $mindustryVersion... "
        new URL(url).withInputStream { i -> f.withOutputStream { it << i } }
        println "Done"
    }
    javaexec {
        classpath = files(path)
    }
}
*/

//task buildDex dependsOn "build", "dexify"