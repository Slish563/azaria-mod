plugins {
    id 'java'
}

group pGroup

sourceSets.main {
    java.srcDir("src/")
    resources.srcDir("assets/")
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "com.github.Anuken.Mindustry:core:$pMindustryVersion"
}       

jar {
    archiveFileName.set pArtifactFilename
}

task dexify(type: Jar) {
    archiveName "dexed-$pArtifactFilename"

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, pArtifactFilename),
               dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "dexed.jar")
    doFirst {
        exec {
            workingDir dexedArtifact.parent
            def command = ["d8", "--min-api", pMinApi, "--output", dexedArtifact, jarArtifact]
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows'))
                commandLine("cmd", "/c", *command)
            else
                commandLine(*command)

        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

def os() { //Returns OS name
    String s = System.getProperty("os.name");
    return s == null ? "" : s;
}

def getdatadir() { //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if(ret == null) {
        def os = os()
        if(os.contains("Windows")) {
            return System.getenv("AppData") + "\\Mindustry\\"
        } else if(os.contains("Linux") || os.contains("BSD")) {
            if(System.getenv("XDG_DATA_HOME") != null) {
                String dir = System.getenv("XDG_DATA_HOME")
                if(!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        } else if(os.contains("Mac")) {
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/";
        }
    }
    return ret
}

tasks.create("copymod").dependsOn("build").doLast {
    def moddir = getdatadir() + "mods"
    copy {
        from "build\\libs\\$pArtifactFilename"
        into moddir
    }
}

tasks.create("run").dependsOn("copymod").doLast {
    def path = temporaryDir.absolutePath + "\\Mindustry.jar"
    def url = "https://github.com/Anuken/Mindustry/releases/download/$pMindustryVersion"+"/Mindustry.jar"
    def f = new File(path)
    if (!f.exists()) {
        print "Downloading Mindustry $pMindustryVersion... "
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
        println "Done"
    }
    javaexec {
        classpath = files(path)
    }
}

task buildDex dependsOn "build", "dexify"
